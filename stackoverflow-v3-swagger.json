{
  "openapi": "3.0.1",
  "info": {
    "title": "Stack Overflow for Teams API",
    "version": "v3"
  },
  "servers": [
    {
      "url": "/v3"
    }
  ],
  "paths": {
    "/teams/{team}/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Retrieve all questions",
        "description": "Retrieves all questions on the site or team.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/QuestionSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "isAnswered",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hasAcceptedAnswer",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "questionId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tagId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "authorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Questions found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedQuestions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create a question",
        "description": "Creates a question.",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Question created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Retrieve a question",
        "description": "Retrieves a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Questions"
        ],
        "summary": "Update a question",
        "description": "Updates a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Delete a question",
        "description": "Deletes a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Question deleted"
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/linked": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Retrieve linked questions",
        "description": "Retrieves questions linked to another question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LinkedOrRelatedQuestionsSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Linked question(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLinkedOrRelatedQuestions"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/related": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Retrieve related questions",
        "description": "Retrieves questions related to another question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LinkedOrRelatedQuestionsSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Related question(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLinkedOrRelatedQuestions"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/flags/options": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Retrieve list of flag options",
        "description": "Retrieve a list of flag options for a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flag options found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlagOptionResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/upvote": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Upvote a question",
        "description": "Upvotes a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question upvoted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Delete question upvote",
        "description": "Deletes the upvote of a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upvote deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/downvote": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Downvote a question",
        "description": "Downvote a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question downvoted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Delete question downvote",
        "description": "Deletes the downvote of a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Downvote deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/bookmark": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Bookmark question",
        "description": "Bookmarks a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Question bookmarked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Unbookmark question",
        "description": "Unbookmarks a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question unbookmarked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/flags": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Raises a flag for a question",
        "description": "Raises a flag for a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flag added"
          },
          "400": {
            "description": "Unable to add flag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers": {
      "get": {
        "tags": [
          "Answers"
        ],
        "summary": "Retrieve all answers to a question",
        "description": "Retrieves all answers to a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AnswersSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Answer(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAnswers"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Create an answer",
        "description": "Creates an answer to a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Answer created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}": {
      "get": {
        "tags": [
          "Answers"
        ],
        "summary": "Retrieve an answer",
        "description": "Retrieves an answer to a question, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Answer found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Answer or question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Answers"
        ],
        "summary": "Update an answer",
        "description": "Updates an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Answer updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Answers"
        ],
        "summary": "Delete an answer",
        "description": "Deletes an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Answer deleted"
          },
          "404": {
            "description": "Answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}/flags/options": {
      "get": {
        "tags": [
          "Answers"
        ],
        "summary": "Retrive a list of flag options",
        "description": "Retrieve a list of flag options for an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlagOptionResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}/upvote": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Upvote an answer",
        "description": "Upvotes an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Answer upvoted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question or answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Answers"
        ],
        "summary": "Delete answer upvote",
        "description": "Deletes the upvote of an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upvote deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question or answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}/downvote": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Downvote an answer",
        "description": "Downvotes an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Answer downvoted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question or answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Answers"
        ],
        "summary": "Delete answer downvote",
        "description": "Deletes the downvote of an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Downvote deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question or answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}/accept": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Accept an answer",
        "description": "Accepts an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Answer accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question or answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Answers"
        ],
        "summary": "Unaccept an answer",
        "description": "Unaccepts an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unaccepted answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Question or answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}/flags": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Raises a flag for an answer",
        "description": "Raises a flag for an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FlagRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flag added"
          },
          "400": {
            "description": "Unable to add flag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Answer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/articles": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve all articles",
        "description": "Retrieves all articles on the site or team.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ArticleSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "tagId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "authorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Articles found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArticles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Articles"
        ],
        "summary": "Create an article",
        "description": "Creates an article.",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/articles/{articleId}": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve an article",
        "description": "Retrieves a article, identified by article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Articles"
        ],
        "summary": "Update an article",
        "description": "Updates an article, identified by Article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Articles"
        ],
        "summary": "Delete an article",
        "description": "Deletes an article, identified by article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Article deleted"
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/articles/{articleId}/linked-questions": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve linked questions",
        "description": "Retrieves questions linked to an article, identified by article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LinkedOrRelatedQuestionsSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Linked question(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLinkedOrRelatedQuestions"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/articles/{articleId}/upvote": {
      "post": {
        "tags": [
          "Articles"
        ],
        "summary": "Upvote an article",
        "description": "Upvotes an article, identified by Article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article upvoted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Articles"
        ],
        "summary": "Delete article upvote",
        "description": "Deletes the upvote of an article, identified by Article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upvote deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve tags",
        "description": "Queries all tags on the site.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TagsSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "partialName",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Partial name of the tag"
            }
          },
          {
            "name": "hasSmes",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "If included, whether or not to return tags that only have SMEs, or only tags that have no SMEs. If not included, they will all be included."
            }
          },
          {
            "name": "hasSynonyms",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "If included, whether or not to return tags that only have synonyms, or only tags that have no synonyms. If not included, they will all be included."
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTags"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve a tag",
        "description": "Retrieves a tag, identified by tag ID.",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}/subject-matter-experts": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve subject matter experts for a tag",
        "description": "Retrieves the subject matter experts for a tag, identified by tag ID.",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subject matter expert(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectMatterExpertResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Subject matter expert(s) not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Subject matter experts feature not enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Replace subject matter expert(s) for a tag",
        "description": "Replaces the subject matter expert(s) for a tag, identified by tag ID. Send new user ID(s) and/or user group ID(s).",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectMatterExpertRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectMatterExpertRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectMatterExpertRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectMatterExpertRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subject matter experts replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectMatterExpertResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Subject matter experts feature not enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}/tag-watchers": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieves users who are tag watchers of the specified tag",
        "description": "Retrieves the tag watchers for a tag, identified by tag ID.",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag watchers found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagWatchersResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}/subject-matter-experts/user-groups": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Add user group(s) as subject matter experts to a tag",
        "description": "Adds one or more user groups as subject matter experts to a tag, identified by tag ID and user group ID(s).",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User group IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                2,
                5
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                2,
                5
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                2,
                5
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                2,
                5
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "User group(s) added as subject matter experts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectMatterExpertResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Subject matter experts feature not enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}/subject-matter-experts/users": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Add user(s) as subject matter expert(s) to a tag",
        "description": "Adds one or more users as subject matter experts to a tag, identified by tag ID and user ID(s).",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User ID(s)",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "User(s) added as subject matter expert(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectMatterExpertResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Subject matter experts feature not enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}/subject-matter-experts/user-groups/{userGroupId}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove a user group as subject matter experts for a tag",
        "description": "Removes a user group as subject matter experts for a tag, identified by tag ID and user group ID.",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 789
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User group removed as subject matter experts"
          },
          "422": {
            "description": "Subject matter experts feature not enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/tags/{tagId}/subject-matter-experts/users/{userId}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove a user as subject matter expert for a tag",
        "description": "Removes a user as subject matter expert for a tag, identified by tag ID and user ID.",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed as subject matter expert"
          },
          "422": {
            "description": "Subject matter experts feature not enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Retrieve comments on a question",
        "description": "Retrieves comments on a question, identified by question ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/articles/{articleId}/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Retrieve comments on an article",
        "description": "Retrieves comments on an article, identified by article ID.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/questions/{questionId}/answers/{answerId}/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Retrieve comments on an answer",
        "description": "Retrieves comments on an answer, identified by question ID and answer ID.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 456
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Answer or question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve logged-in user details",
        "description": "Retrieves details for the logged-in user.",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve all users",
        "description": "Retrieves all users on the site or team.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UsersSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsers"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user",
        "description": "Retrieves details for a user, identified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/users/by-email/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user by email address",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireAdminRole",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/users/{userId}/watched-tags": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a list of tags watched by user",
        "description": "Retrieves watched tags, identified by tag name.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "123",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagSummaryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/users/by-external-id/{externalId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user by external ID",
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireAdminRole",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/user-groups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Retrieve all user groups",
        "description": "Retrieves all user groups on the site or team.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UserGroupsSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User groups found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroups"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Create a user group",
        "description": "Creates a user group.",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User group created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Inadequate permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/user-groups/{userGroupId}": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Retrieve a user group",
        "description": "Retrieves a user group, identified by user group ID.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 789
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Update a user group",
        "description": "Updates a user group, identified by user group ID.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 789
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User group updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/user-groups/{userGroupId}/members": {
      "post": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Add member(s) to a user group",
        "description": "Adds one or more members to a user group, identified by user group ID and user ID(s).",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 789
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User ID(s)",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": [
                123,
                456
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member(s) added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/user-groups/{userGroupId}/members/{userId}": {
      "delete": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Delete a member from a user group",
        "description": "Deletes a member from a user group, identified by user group ID and user ID.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 789
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "User group or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchSortParameter"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSearchResults"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/communities": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Retrieves all communities on the site.",
        "description": "Queries all communities on the site.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommunitySortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Communities(s) found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCommunities"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/communities/{communityId}": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Retrieve a community",
        "description": "Retrieves a community, identified by community ID.",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "Community ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Community found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/communities/{communityId}/join": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Join a community",
        "description": "Adds current user to a community, identified by community ID.",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "Community ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User joined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/communities/{communityId}/join/bulk": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Join multiple users to a community",
        "description": "Adds the given users by ID to a community, identified by community ID.",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "Community ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityJoinModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityJoinModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityJoinModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityJoinModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users joined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/communities/{communityId}/leave": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Leave a community",
        "description": "Remove current user from a community, identified by community ID.",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "Community ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User left",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/communities/{communityId}/leave/bulk": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Leave a community for multiple users",
        "description": "Remove the given users by ID from a community, identified by community ID.",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "Community ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityLeaveModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityLeaveModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityLeaveModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityLeaveModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User left",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/collections": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Retrieve all collections",
        "description": "Retrieves all collections for the full site or specified team.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "pattern": "15|30|50|100",
              "enum": [
                15,
                30,
                50,
                100
              ],
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CollectionsSortParameter"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "name": "authorIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "partialTitle",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CollectionsPermissionsFilter"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collections found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollections"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a collection",
        "description": "Creates a collection.",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Collection created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/collections/{collectionId}": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Retrieve a collection",
        "description": "Retrieves a collection, identified by collection ID.",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              null
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Collections"
        ],
        "summary": "Update a collection",
        "description": "Updates a collection, identified by collection ID.",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditCollectionRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCollectionRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCollectionRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditCollectionRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Collection updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete a collection",
        "description": "Deletes a collection, identified by collection ID.",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Collection deleted"
          },
          "403": {
            "description": "No permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/images/{imageId}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Gets an image by Id.",
        "description": "This endpoint retrieves an image file given its id.",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image retrieved successfully.",
            "content": {
              "image/png": { }
            }
          },
          "404": {
            "description": "Image not found."
          },
          "500": {
            "description": "Internal server error."
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireAccessToken",
              null
            ]
          }
        ]
      }
    },
    "/teams/{team}/images/upload": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads an image file.",
        "description": "This endpoint uploads an image file and returns the URI of the uploaded image if successful. \nSupported file types: jpeg, png, gif, bmp, webp (Max size 2 MiB)",
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "image/jpeg": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "img/png": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "img/gif": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "img/bmp": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "img/webp": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request with details in the problem details format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type."
          },
          "500": {
            "description": "Internal server error."
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid access token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "RequireWriteAccess",
              null
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AnswerRequestModel": {
        "title": "Answer request",
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "minLength": 1,
            "type": "string",
            "description": "Answer body. The written content of the answer.",
            "example": "This is a common answer to a common question."
          }
        },
        "additionalProperties": false
      },
      "AnswerResponseModel": {
        "title": "Answer",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The answer's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "questionId": {
            "type": "integer",
            "description": "Question ID. The ID of the answered question.",
            "format": "int32",
            "example": 1234
          },
          "body": {
            "type": "string",
            "description": "Answer body. The written content of the answer.",
            "example": "<p>This is a common answer to a common question</p>"
          },
          "score": {
            "type": "integer",
            "description": "Answer Score. Calculated by subtracting the number of downvotes from the number of upvotes",
            "format": "int32",
            "example": 23
          },
          "isAccepted": {
            "type": "boolean",
            "description": "Accepted answer. Returns true if this is the accepted answer for the question.",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Answer deleted. Returns true if the answer was deleted.",
            "example": false
          },
          "isBookmarked": {
            "type": "boolean",
            "description": "Answer bookmarked. Returns true if the logged-in user bookmarked the answer.",
            "example": true
          },
          "isFollowed": {
            "type": "boolean",
            "description": "Answer followed. Returns true if the logged-in user followed the answer.",
            "example": false
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the answer was created.",
            "format": "date-time",
            "example": "2022-07-25T08:00:51.170641Z"
          },
          "lockedDate": {
            "type": "string",
            "description": "Locked date. The date and time the answer was locked.",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "lastEditDate": {
            "type": "string",
            "description": "Last edit date. The date and time the answer was last edited.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-28T12:36:31.827519Z"
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last activity date. The date and time the answer last had activity.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-28T12:36:31.827519Z"
          },
          "deletionDate": {
            "type": "string",
            "description": "Deletion date. The date and time the answer was deleted.",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastActivityUser": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "commentCount": {
            "type": "integer",
            "description": "Comment count. The number of comments on the answer.",
            "format": "int32",
            "example": 12
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The answer's direct URL.",
            "nullable": true,
            "example": "https://stackoverflowteams.com/a/16/17"
          },
          "shareLink": {
            "type": "string",
            "description": "Share link. The link to the answer for sharing.",
            "nullable": true,
            "example": "https://stackoverflowteams.com/a/16/17"
          },
          "userCanFollow": {
            "type": "boolean",
            "description": "User can follow answer. Returns true if the logged-in user can follow the answer.",
            "example": true
          },
          "canBeFollowed": {
            "type": "boolean",
            "description": "Answer can be followed. Returns true if anyone can follow the answer.",
            "example": true
          },
          "isSubjectMatterExpert": {
            "type": "boolean",
            "description": "Answer is from a subject matter expert.",
            "example": false
          },
          "bodyMarkdown": {
            "type": "string",
            "description": "Body in Markdown format.",
            "example": "This is a common answer to a common question"
          }
        },
        "additionalProperties": false
      },
      "AnswerSearchResultModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResultModel"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "answer"
          },
          "answerId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "parentQuestionId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isAccepted": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AnswerSummaryResponseModel": {
        "title": "Answer summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The answer's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "questionId": {
            "type": "integer",
            "description": "Question ID. The ID of the answered question.",
            "format": "int32",
            "example": 1234
          },
          "body": {
            "type": "string",
            "description": "Answer body. The written content of the answer.",
            "example": "<p>This is a common answer to a common question</p>"
          },
          "score": {
            "type": "integer",
            "description": "Answer Score. Calculated by subtracting the number of downvotes from the number of upvotes",
            "format": "int32",
            "example": 23
          },
          "isAccepted": {
            "type": "boolean",
            "description": "Accepted answer. Returns true if this is the accepted answer for the question.",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Answer deleted. Returns true if the answer was deleted.",
            "example": false
          },
          "isBookmarked": {
            "type": "boolean",
            "description": "Answer bookmarked. Returns true if the logged-in user bookmarked the answer.",
            "example": true
          },
          "isFollowed": {
            "type": "boolean",
            "description": "Answer followed. Returns true if the logged-in user followed the answer.",
            "example": false
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the answer was created.",
            "format": "date-time",
            "example": "2022-07-25T08:00:51.170641Z"
          },
          "lockedDate": {
            "type": "string",
            "description": "Locked date. The date and time the answer was locked.",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "lastEditDate": {
            "type": "string",
            "description": "Last edit date. The date and time the answer was last edited.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-28T12:36:31.827519Z"
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last activity date. The date and time the answer last had activity.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-28T12:36:31.827519Z"
          },
          "deletionDate": {
            "type": "string",
            "description": "Deletion date. The date and time the answer was deleted.",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastActivityUser": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "commentCount": {
            "type": "integer",
            "description": "Comment count. The number of comments on the answer.",
            "format": "int32",
            "example": 12
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The answer's direct URL.",
            "nullable": true,
            "example": "https://stackoverflowteams.com/a/16/17"
          },
          "shareLink": {
            "type": "string",
            "description": "Share link. The link to the answer for sharing.",
            "nullable": true,
            "example": "https://stackoverflowteams.com/a/16/17"
          },
          "userCanFollow": {
            "type": "boolean",
            "description": "User can follow answer. Returns true if the logged-in user can follow the answer.",
            "example": true
          },
          "canBeFollowed": {
            "type": "boolean",
            "description": "Answer can be followed. Returns true if anyone can follow the answer.",
            "example": true
          },
          "isSubjectMatterExpert": {
            "type": "boolean",
            "description": "Answer is from a subject matter expert.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "AnswersSortParameter": {
        "enum": [
          "score",
          "modified",
          "creation"
        ],
        "type": "string",
        "description": "Answers sort parameter"
      },
      "ArticlePermissionsRequestModel": {
        "type": "object",
        "properties": {
          "editableBy": {
            "$ref": "#/components/schemas/ArticlePermissionsType"
          },
          "editorUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Editor User IDs. The identity of users who can edit this article",
            "example": [
              2,
              20,
              46
            ]
          },
          "editorUserGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Editor User Group IDs. The identity of user groups who can edit this article",
            "example": [
              1001,
              1002
            ]
          }
        },
        "additionalProperties": false
      },
      "ArticlePermissionsResponseModel": {
        "type": "object",
        "properties": {
          "editableBy": {
            "$ref": "#/components/schemas/ArticlePermissionsType"
          },
          "editorUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryResponseModel"
            },
            "description": "Editor Users. The individual users who can edit this article"
          },
          "editorUserGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupResponseModel"
            },
            "description": "Editor User Groups. The user groups that can edit this article"
          }
        },
        "additionalProperties": false
      },
      "ArticlePermissionsType": {
        "enum": [
          "ownerOnly",
          "specificEditors",
          "everyone"
        ],
        "type": "string"
      },
      "ArticleRequestModel": {
        "title": "Article request model",
        "required": [
          "body",
          "permissions",
          "tags",
          "title",
          "type"
        ],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "Article title. The purpose of the article, stated briefly in one sentence.",
            "example": "Python Style Guide"
          },
          "body": {
            "minLength": 1,
            "type": "string",
            "description": "Body. The bulk of the information to share.",
            "example": "Python is the primary language for the Data Science Teams at Stack Overflow. This document is a style guide for how Python code is written at Stack Overflow."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags. Tags associated with the article."
          },
          "type": {
            "$ref": "#/components/schemas/ArticleType"
          },
          "permissions": {
            "$ref": "#/components/schemas/ArticlePermissionsRequestModel"
          }
        },
        "additionalProperties": false
      },
      "ArticleResponseModel": {
        "title": "Article",
        "type": "object",
        "properties": {
          "communities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunitySummaryResponseModel"
            }
          },
          "id": {
            "type": "integer",
            "description": "ID. The article's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/ArticleType"
          },
          "title": {
            "type": "string",
            "description": "Title. The actual article, stated briefly in one sentence.",
            "example": "Python Style Guide"
          },
          "body": {
            "type": "string",
            "description": "Body. Additional details to clarify the article.",
            "example": "<p>Python is the primary language for the Data Science Teams at Stack Overflow. This document is a style guide for how Python code is written at Stack Overflow.</p>"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. Tags associated with the article."
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the article was created.",
            "format": "date-time",
            "example": "2018-04-08T10:30:21.254Z"
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last activity date. The date and time the article or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-12-21T17:16:48.462Z"
          },
          "score": {
            "type": "integer",
            "description": "Score. Calculated by subtracting the number of downvotes from the number of upvotes",
            "format": "int32",
            "example": 23
          },
          "viewCount": {
            "type": "integer",
            "description": "View count. The number of times users have viewed this article.",
            "format": "int32",
            "example": 85964
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The article's direct URL.",
            "example": "https://stackoverflow.com/articles/927358"
          },
          "shareUrl": {
            "type": "string",
            "description": "Share URL. The article's URL for sharing.",
            "example": "https://stackoverflow.com/articles/927358"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted. Returns true if the article was deleted.",
            "example": false
          },
          "isObsolete": {
            "type": "boolean",
            "description": "Is obsolete. Returns true if the article was marked by a moderator as obsolete.",
            "example": false
          },
          "isClosed": {
            "type": "boolean",
            "description": "Is closed. Returns true if the article was closed by a moderator.",
            "example": false
          },
          "bodyMarkdown": {
            "type": "string",
            "description": "Body in Markdown format.",
            "example": "I accidentally committed the wrong files to Git, but didn't push the commit to the server yet."
          },
          "userIsFollowing": {
            "type": "boolean",
            "description": "User is following. Returns true if the logged-in user followed the article.",
            "example": false
          },
          "userHasUpvoted": {
            "type": "boolean",
            "description": "User has upvoted. Returns true if the logged-in user has upvoted the article.",
            "example": false
          },
          "userHasDownvoted": {
            "type": "boolean",
            "description": "User has downvoted. Returns true if the logged-in user has downvoted the article.",
            "example": false
          },
          "userCanEdit": {
            "type": "boolean",
            "description": "User can edit. Returns true if the this article can be edited by the authenticated user.",
            "example": false
          },
          "permissions": {
            "$ref": "#/components/schemas/ArticlePermissionsResponseModel"
          }
        },
        "additionalProperties": false
      },
      "ArticleSearchResultModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResultModel"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "article"
          },
          "articleId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "viewCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "articleType": {
            "$ref": "#/components/schemas/ArticleType"
          },
          "readTimeInMinutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ArticleSortParameter": {
        "enum": [
          "activity",
          "creation",
          "score"
        ],
        "type": "string",
        "description": "Articles sort parameter"
      },
      "ArticleSummaryResponseModel": {
        "title": "Article summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The article's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/ArticleType"
          },
          "title": {
            "type": "string",
            "description": "Title. The actual article, stated briefly in one sentence.",
            "example": "Python Style Guide"
          },
          "body": {
            "type": "string",
            "description": "Body. Additional details to clarify the article.",
            "example": "<p>Python is the primary language for the Data Science Teams at Stack Overflow. This document is a style guide for how Python code is written at Stack Overflow.</p>"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. Tags associated with the article."
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the article was created.",
            "format": "date-time",
            "example": "2018-04-08T10:30:21.254Z"
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last activity date. The date and time the article or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-12-21T17:16:48.462Z"
          },
          "score": {
            "type": "integer",
            "description": "Score. Calculated by subtracting the number of downvotes from the number of upvotes",
            "format": "int32",
            "example": 23
          },
          "viewCount": {
            "type": "integer",
            "description": "View count. The number of times users have viewed this article.",
            "format": "int32",
            "example": 85964
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The article's direct URL.",
            "example": "https://stackoverflow.com/articles/927358"
          },
          "shareUrl": {
            "type": "string",
            "description": "Share URL. The article's URL for sharing.",
            "example": "https://stackoverflow.com/articles/927358"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted. Returns true if the article was deleted.",
            "example": false
          },
          "isObsolete": {
            "type": "boolean",
            "description": "Is obsolete. Returns true if the article was marked by a moderator as obsolete.",
            "example": false
          },
          "isClosed": {
            "type": "boolean",
            "description": "Is closed. Returns true if the article was closed by a moderator.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ArticleType": {
        "enum": [
          "knowledgeArticle",
          "announcement",
          "policy",
          "howToGuide"
        ],
        "type": "string",
        "description": "Article Type"
      },
      "BountyResponseModel": {
        "title": "Bounty",
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount. The number of points the question asker will reward the poster of an accepted answer.",
            "format": "int32",
            "example": 50
          },
          "closes": {
            "type": "string",
            "description": "Closes. The date and time the bounty expires.",
            "format": "date-time",
            "example": "2022-10-12T7:16:48.462Z"
          }
        },
        "additionalProperties": false
      },
      "CollectionContentSummaryResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The content's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/CollectionContentType"
          },
          "title": {
            "type": "string",
            "description": "Title. The title of the question or article.",
            "example": "What is gamification?"
          }
        },
        "additionalProperties": false,
        "description": "A content item (post) returned by the collection endpoint. This model makes no distinction between questions and articles and returns them together, filtered and sorted."
      },
      "CollectionContentType": {
        "enum": [
          "unknown",
          "question",
          "article"
        ],
        "type": "string"
      },
      "CollectionRequestModel": {
        "title": "Collection Create Model",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title. A brief title to distinguish the collection and its contents.",
            "example": "Gamification and Reputation"
          },
          "description": {
            "type": "string",
            "description": "Description. A detailed description of what the collection contains. Supports Markdown.",
            "example": "Questions and articles about gamification and reputation."
          },
          "editorUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Editor user IDs. The IDs of users who can modify this collection.",
            "example": [
              2,
              20,
              46
            ]
          },
          "editorUserGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Editor user group IDs. The IDs of user groups whose members can modify this collection.",
            "example": [
              89,
              12,
              43
            ]
          },
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Content IDs. The IDs of questions and/or articles that this collection contains, in order.",
            "example": [
              47,
              2,
              81
            ]
          }
        },
        "additionalProperties": false
      },
      "CollectionsPermissionsFilter": {
        "enum": [
          "all",
          "owned",
          "editable"
        ],
        "type": "string"
      },
      "CollectionsResponseModel": {
        "title": "Collection",
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionContentSummaryResponseModel"
            },
            "description": "Content. The content items (questions and/or articles) contained in this collection."
          },
          "editorUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryResponseModel"
            },
            "description": "Editor users. Users who can edit this collection."
          },
          "editorUserGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupResponseModel"
            },
            "description": "Editor user groups. User groups whose members can modify this collection."
          },
          "id": {
            "type": "integer",
            "description": "ID. The Collection's unique identifier.",
            "format": "int32",
            "example": 4325
          },
          "title": {
            "type": "string",
            "description": "Title. A brief title to distinguish the Collection and its contents.",
            "example": "Gamification and Reputation"
          },
          "description": {
            "type": "string",
            "description": "Description. A detailed description of what the Collection contains. Supports Markdown.",
            "example": "Questions and Articles about gamification and reputation"
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the collection was created.",
            "format": "date-time",
            "example": "2023-04-08T10:30:21.254Z"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted. Returns true if the collection was deleted.",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. Tags associated with the content items in the collection.",
            "example": {
              "id": 123,
              "name": "Gamification",
              "description": "Using gamification to increase user engagement",
              "postCount": 129,
              "subjectMatterExpertCount": 10,
              "watcherCount": 141,
              "creationDate": "1955-11-12T22:04:00.0"
            }
          }
        },
        "additionalProperties": false
      },
      "CollectionsSortParameter": {
        "enum": [
          "creation",
          "lastEdit"
        ],
        "type": "string"
      },
      "CollectionsSummaryResponseModel": {
        "title": "Collection Summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The Collection's unique identifier.",
            "format": "int32",
            "example": 4325
          },
          "title": {
            "type": "string",
            "description": "Title. A brief title to distinguish the Collection and its contents.",
            "example": "Gamification and Reputation"
          },
          "description": {
            "type": "string",
            "description": "Description. A detailed description of what the Collection contains. Supports Markdown.",
            "example": "Questions and Articles about gamification and reputation"
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the collection was created.",
            "format": "date-time",
            "example": "2023-04-08T10:30:21.254Z"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted. Returns true if the collection was deleted.",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. Tags associated with the content items in the collection.",
            "example": {
              "id": 123,
              "name": "Gamification",
              "description": "Using gamification to increase user engagement",
              "postCount": 129,
              "subjectMatterExpertCount": 10,
              "watcherCount": 141,
              "creationDate": "1955-11-12T22:04:00.0"
            }
          }
        },
        "additionalProperties": false
      },
      "CommentResponseModel": {
        "title": "Comment",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The comment's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "score": {
            "type": "integer",
            "description": "Comment score. Calculated by subtracting the number of downvotes from the number of upvotes.",
            "format": "int32",
            "example": 7
          },
          "body": {
            "type": "string",
            "description": "Comment body. The written content of the comment.",
            "example": "This is a comment on a post."
          },
          "ownerUserId": {
            "type": "integer",
            "description": "Comment owner. ID of the user that posted the comment.",
            "format": "int32",
            "nullable": true,
            "example": 789
          },
          "ownerDisplayName": {
            "type": "string",
            "description": "Comment owner. Name of the user that posted the comment.",
            "example": "Roberta Redding"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the question was created.",
            "format": "date-time",
            "example": "2022-07-25T08:00:51.170641Z"
          }
        },
        "additionalProperties": false
      },
      "CommunityJoinModel": {
        "title": "Community Join model",
        "type": "object",
        "properties": {
          "memberUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Member User IDs. The identity of users who will join this community",
            "example": [
              2,
              20,
              46
            ]
          }
        },
        "additionalProperties": false
      },
      "CommunityLeaveModel": {
        "title": "Community Leave model",
        "type": "object",
        "properties": {
          "memberUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Member User IDs. The identity of users who will leave this community",
            "example": [
              2,
              20,
              46
            ]
          }
        },
        "additionalProperties": false
      },
      "CommunityMemberResponseModel": {
        "title": "Community Member summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The member's user ID.",
            "format": "int32",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Name. The member's name.",
            "example": "Stack User"
          },
          "memberSince": {
            "type": "string",
            "description": "Member since. The date and time the member joined the community.",
            "format": "date-time",
            "example": "2018-04-08T10:30:21.254Z"
          },
          "isSme": {
            "type": "boolean",
            "description": "Is SME. Returns true if the member is an SME (subject matter expert) for one or more of the community's tags.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "CommunityResponseModel": {
        "title": "Community response model",
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityMemberResponseModel"
            },
            "description": "Members. The community's members."
          },
          "name": {
            "type": "string",
            "description": "Name. The community's name.",
            "example": "CI/CD"
          },
          "description": {
            "type": "string",
            "description": "Description. The community's description.",
            "example": "All things pertaining to CI (continuous integration) and CD (continuous delivery)"
          },
          "id": {
            "type": "integer",
            "description": "ID. The community's ID.",
            "format": "int32",
            "example": 4
          },
          "memberCount": {
            "type": "integer",
            "description": "Member count. Number of members in the community.",
            "format": "int32",
            "example": 12
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. The community's tags."
          }
        },
        "additionalProperties": false
      },
      "CommunitySortParameter": {
        "enum": [
          "name",
          "size"
        ],
        "type": "string",
        "description": "Communities sort parameter"
      },
      "CommunitySummaryResponseModel": {
        "title": "Community summary",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name. The community's name.",
            "example": "CI/CD"
          },
          "description": {
            "type": "string",
            "description": "Description. The community's description.",
            "example": "All things pertaining to CI (continuous integration) and CD (continuous delivery)"
          },
          "id": {
            "type": "integer",
            "description": "ID. The community's ID.",
            "format": "int32",
            "example": 4
          },
          "memberCount": {
            "type": "integer",
            "description": "Member count. Number of members in the community.",
            "format": "int32",
            "example": 12
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. The community's tags."
          }
        },
        "additionalProperties": false
      },
      "EditCollectionRequestModel": {
        "title": "Collection Edit Model",
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "integer",
            "description": "Owner ID. The ID of the user who has ownership of the collection.",
            "format": "int32",
            "nullable": true,
            "example": 476
          },
          "title": {
            "type": "string",
            "description": "Title. A brief title to distinguish the collection and its contents.",
            "example": "Gamification and Reputation"
          },
          "description": {
            "type": "string",
            "description": "Description. A detailed description of what the collection contains. Supports Markdown.",
            "example": "Questions and articles about gamification and reputation."
          },
          "editorUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Editor user IDs. The IDs of users who can modify this collection.",
            "example": [
              2,
              20,
              46
            ]
          },
          "editorUserGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Editor user group IDs. The IDs of user groups whose members can modify this collection.",
            "example": [
              89,
              12,
              43
            ]
          },
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Content IDs. The IDs of questions and/or articles that this collection contains, in order.",
            "example": [
              47,
              2,
              81
            ]
          }
        },
        "additionalProperties": false
      },
      "FlagOptionResponseModel": {
        "title": "Flag option response model",
        "type": "object",
        "properties": {
          "optionId": {
            "type": "integer",
            "description": "Flag option ID. Use this id when raising a flag.",
            "format": "int32",
            "nullable": true,
            "example": 1234
          },
          "dialogTitle": {
            "type": "string",
            "description": "Title of the dialog for flag selection.",
            "nullable": true,
            "example": "I am flagging to report this question as..."
          },
          "title": {
            "type": "string",
            "description": "Title of the flagging option.",
            "nullable": true,
            "example": "rude or abusive"
          },
          "description": {
            "type": "string",
            "description": "Description of the flagging option.",
            "nullable": true,
            "example": "A reasonable person would find this content inappropriate for respectful discourse."
          },
          "requiresComment": {
            "type": "boolean",
            "description": "Indicates if the Comment field must be present when raising the flag.",
            "example": true
          },
          "requiresSite": {
            "type": "boolean",
            "description": "Indicates if the TargetSite field must be present when raising the flag.",
            "example": true
          },
          "requiresQuestionId": {
            "type": "boolean",
            "description": "Indicates if the RelatedQuestionId field must be present when raising the flag.",
            "example": true
          },
          "isRetraction": {
            "type": "boolean",
            "description": "Indicates that the current user has already raised this flag.",
            "example": true
          },
          "subOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlagOptionResponseModel"
            },
            "description": "Used to represend a list of sub options. Flag options that have sub options can not be selected when raising a flag.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FlagRequestModel": {
        "title": "Flag request model",
        "required": [
          "optionId"
        ],
        "type": "object",
        "properties": {
          "optionId": {
            "type": "integer",
            "description": "Flag option ID. This value will be provided when requesting list of available flags.",
            "format": "int32",
            "example": 1234
          },
          "comment": {
            "type": "string",
            "description": "User's comment. Only include this field if the flag option requires it.",
            "nullable": true,
            "example": "I'm flagging this post because it is spam"
          },
          "relatedQuestionId": {
            "type": "integer",
            "description": "ID of a related question. Only include this field if the flag option requires it.",
            "format": "int32",
            "nullable": true,
            "example": 1234
          },
          "targetSite": {
            "type": "string",
            "description": "Name of the network site where question should be migrated. Only include this field if the flag option requires it.",
            "nullable": true,
            "example": "stackoverflow.com"
          }
        },
        "additionalProperties": false
      },
      "ImageResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id. The image GUID Id."
          },
          "url": {
            "type": "string",
            "description": "Url. The URL to the image."
          }
        },
        "additionalProperties": false,
        "description": "Image"
      },
      "LinkedOrRelatedQuestionsSortParameter": {
        "enum": [
          "hot",
          "creation",
          "activity",
          "score"
        ],
        "type": "string",
        "description": "Linked or related questions sort parameter"
      },
      "ManageUserResponseModel": {
        "title": "User management",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address.",
            "nullable": true,
            "example": "user@example.com"
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Is deactivated.",
            "example": false
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date.",
            "format": "date-time",
            "example": "2022-09-06T14:28:45.473"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Last modified date.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-05-02T12:04:18.826"
          },
          "lastAccessDate": {
            "type": "string",
            "description": "Last access date.",
            "format": "date-time",
            "example": "2024-06-26T17:31:20.052"
          },
          "id": {
            "type": "integer",
            "description": "ID. The user's unique identifier on this site.",
            "format": "int32",
            "example": 123
          },
          "accountId": {
            "type": "integer",
            "description": "Account ID. The user's unique account identifier across all Stack Overflow sites.",
            "format": "int32",
            "nullable": true,
            "example": 146
          },
          "name": {
            "type": "string",
            "description": "Name. The user's name.",
            "example": "Stack User"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Avatar URL. The URL to the user's avatar (profile picture).",
            "example": "https://stackoverflow.design/assets/img/logos/se/se-icon.png"
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The URL to the user's profile.",
            "example": "https://stackoverflow.com/users/31280"
          },
          "reputation": {
            "type": "integer",
            "description": "Reputation. The user's numerical reputation.",
            "format": "int32",
            "example": 101
          },
          "role": {
            "type": "string",
            "description": "Role. The user's role on the site.",
            "example": "Registered"
          }
        },
        "additionalProperties": false
      },
      "ManageUsersSortParameter": {
        "enum": [
          "id",
          "name",
          "email",
          "lastAccessDate"
        ],
        "type": "string",
        "description": "Manage users sort parameter"
      },
      "MentionedUserGroupResponseModel": {
        "title": "Mentioned user group",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The ID of user group mentioned in the question.",
            "format": "int32",
            "example": 23
          },
          "name": {
            "type": "string",
            "description": "Name. The name of user group mentioned in the question.",
            "example": "Knowledgeable Users"
          },
          "memberCount": {
            "type": "integer",
            "description": "Member count. The number of members in the group mentioned in the question.",
            "format": "int32",
            "example": 64
          }
        },
        "additionalProperties": false
      },
      "MentionedUserResponseModel": {
        "title": "Mentioned user",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The ID of the user mentioned in the question.",
            "format": "int32",
            "example": 146
          },
          "name": {
            "type": "string",
            "description": "Name. The name of the user mentioned in the question.",
            "example": "Expert User"
          }
        },
        "additionalProperties": false
      },
      "PaginatedAnswers": {
        "title": "Paginated answers",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/AnswersSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerSummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedArticles": {
        "title": "Paginated articles",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/ArticleSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleSummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedCollections": {
        "title": "Paginated collections",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/CollectionsSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionsSummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedCommunities": {
        "title": "Paginated communities",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/CommunitySortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunitySummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedLinkedOrRelatedQuestions": {
        "title": "Paginated linked or related questions",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/LinkedOrRelatedQuestionsSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionSummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedManageUsers": {
        "title": "Paginated user management",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/ManageUsersSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManageUserResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedQuestions": {
        "title": "Paginated questions",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/QuestionSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionSummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedSearchResults": {
        "title": "Paginated search results",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/SearchSortParameter"
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/QuestionSearchResultModel"
                },
                {
                  "$ref": "#/components/schemas/AnswerSearchResultModel"
                },
                {
                  "$ref": "#/components/schemas/ArticleSearchResultModel"
                }
              ]
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedTags": {
        "title": "Paginated tags",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/TagsSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedUserGroups": {
        "title": "Paginated user groups",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/UserGroupsSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaginatedUsers": {
        "title": "Paginated users",
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total count. The total number of records found.",
            "format": "int32",
            "readOnly": true,
            "example": 12691
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. The number of records to retrieve per page.",
            "format": "int32",
            "readOnly": true,
            "example": 15
          },
          "page": {
            "type": "integer",
            "description": "Page. The number of the current page.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages. The total number of pages available.",
            "format": "int32",
            "readOnly": true,
            "example": 847
          },
          "sort": {
            "$ref": "#/components/schemas/UsersSortParameter"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponseModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "example": "/v3/errors/example-error"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "example": "Error title"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 400
          },
          "detail": {
            "type": "string",
            "nullable": true,
            "example": "Error details"
          },
          "instance": {
            "type": "string",
            "nullable": true,
            "example": ""
          }
        },
        "additionalProperties": { }
      },
      "QuestionRequestModel": {
        "title": "Question request model",
        "required": [
          "body",
          "tags",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "Question title. The actual question, stated briefly in one sentence.",
            "example": "How do I undo the most recent local commits in Git?"
          },
          "body": {
            "minLength": 1,
            "type": "string",
            "description": "Body. Additional details to clarify the question.",
            "example": "I accidentally committed the wrong files to Git, but didn't push the commit to the server yet."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags. Tags associated with the question."
          }
        },
        "additionalProperties": false
      },
      "QuestionResponseModel": {
        "title": "Question",
        "type": "object",
        "properties": {
          "communities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunitySummaryResponseModel"
            }
          },
          "id": {
            "type": "integer",
            "description": "ID. The question's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "title": {
            "type": "string",
            "description": "Title. The actual question, stated briefly in one sentence.",
            "example": "How do I undo the most recent local commits in Git?"
          },
          "body": {
            "type": "string",
            "description": "Body. Additional details to clarify the question.",
            "example": "<p>I accidentally committed the wrong files to Git, but didn't push the commit to the server yet.</p>"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. Tags associated with the question."
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the question was created.",
            "format": "date-time",
            "example": "2018-04-08T10:30:21.254Z"
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last activity date. The date and time the question or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-12-21T17:16:48.462Z"
          },
          "score": {
            "type": "integer",
            "description": "Score. Calculated by subtracting the number of downvotes from the number of upvotes",
            "format": "int32",
            "example": 23
          },
          "isAnswered": {
            "type": "boolean",
            "description": "Is answered. Returns true if the question has at least one upvoted or accepted answer.",
            "example": true
          },
          "answerCount": {
            "type": "integer",
            "description": "Answer count. Number of answers to the question.",
            "format": "int32",
            "example": 2
          },
          "viewCount": {
            "type": "integer",
            "description": "View count. The number of times users have viewed this question.",
            "format": "int32",
            "example": 85964
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The question's direct URL.",
            "example": "https://stackoverflow.com/q/927358"
          },
          "shareUrl": {
            "type": "string",
            "description": "Share URL. The question's URL for sharing.",
            "example": "https://stackoverflow.com/q/927358"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted. Returns true if the question was deleted.",
            "example": false
          },
          "isObsolete": {
            "type": "boolean",
            "description": "Is obsolete. Returns true if the question was marked by a moderator as obsolete.",
            "example": false
          },
          "isClosed": {
            "type": "boolean",
            "description": "Is closed. Returns true if the question was closed by a moderator.",
            "example": false
          },
          "bounty": {
            "$ref": "#/components/schemas/BountyResponseModel"
          },
          "bodyMarkdown": {
            "type": "string",
            "description": "Body in Markdown format.",
            "example": "I accidentally committed the wrong files to Git, but didn't push the commit to the server yet."
          },
          "mentionedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MentionedUserResponseModel"
            }
          },
          "mentionedUserGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MentionedUserGroupResponseModel"
            }
          },
          "userIsFollowing": {
            "type": "boolean",
            "description": "User is following. Returns true if the logged-in user followed the question.",
            "example": false
          },
          "userHasUpvoted": {
            "type": "boolean",
            "description": "User has upvoted. Returns true if the logged-in user has upvoted the question.",
            "example": false
          },
          "userHasDownvoted": {
            "type": "boolean",
            "description": "User has downvoted. Returns true if the logged-in user has downvoted the question.",
            "example": false
          },
          "userHasBookmarked": {
            "type": "boolean",
            "description": "User has bookmarked. Returns true if the logged-in user has bookmarked the question.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "QuestionSearchResultModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResultModel"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "question"
          },
          "questionId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "answerCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hasAcceptedAnswer": {
            "type": "boolean",
            "readOnly": true
          },
          "viewCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "QuestionSortParameter": {
        "enum": [
          "activity",
          "creation",
          "score"
        ],
        "type": "string",
        "description": "Questions sort parameter"
      },
      "QuestionSummaryResponseModel": {
        "title": "Question summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The question's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "title": {
            "type": "string",
            "description": "Title. The actual question, stated briefly in one sentence.",
            "example": "How do I undo the most recent local commits in Git?"
          },
          "body": {
            "type": "string",
            "description": "Body. Additional details to clarify the question.",
            "example": "<p>I accidentally committed the wrong files to Git, but didn't push the commit to the server yet.</p>"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "description": "Tags. Tags associated with the question."
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date. The date and time the question was created.",
            "format": "date-time",
            "example": "2018-04-08T10:30:21.254Z"
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last activity date. The date and time the question or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-12-21T17:16:48.462Z"
          },
          "score": {
            "type": "integer",
            "description": "Score. Calculated by subtracting the number of downvotes from the number of upvotes",
            "format": "int32",
            "example": 23
          },
          "isAnswered": {
            "type": "boolean",
            "description": "Is answered. Returns true if the question has at least one upvoted or accepted answer.",
            "example": true
          },
          "answerCount": {
            "type": "integer",
            "description": "Answer count. Number of answers to the question.",
            "format": "int32",
            "example": 2
          },
          "viewCount": {
            "type": "integer",
            "description": "View count. The number of times users have viewed this question.",
            "format": "int32",
            "example": 85964
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The question's direct URL.",
            "example": "https://stackoverflow.com/q/927358"
          },
          "shareUrl": {
            "type": "string",
            "description": "Share URL. The question's URL for sharing.",
            "example": "https://stackoverflow.com/q/927358"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted. Returns true if the question was deleted.",
            "example": false
          },
          "isObsolete": {
            "type": "boolean",
            "description": "Is obsolete. Returns true if the question was marked by a moderator as obsolete.",
            "example": false
          },
          "isClosed": {
            "type": "boolean",
            "description": "Is closed. Returns true if the question was closed by a moderator.",
            "example": false
          },
          "bounty": {
            "$ref": "#/components/schemas/BountyResponseModel"
          }
        },
        "additionalProperties": false
      },
      "SearchResultModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "readOnly": true
          },
          "snippet": {
            "type": "string",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSummaryResponseModel"
            },
            "readOnly": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserSummaryResponseModel"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "webUrl": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SearchSortParameter": {
        "enum": [
          "relevance",
          "newest",
          "active",
          "score"
        ],
        "type": "string",
        "description": "Search sort parameter"
      },
      "SortOrder": {
        "title": "Sort order",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string"
      },
      "SubjectMatterExpertRequestModel": {
        "title": "Subject matter expert request model",
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              2,
              20,
              46
            ]
          },
          "userGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              12,
              13,
              111
            ]
          }
        },
        "additionalProperties": false
      },
      "SubjectMatterExpertResponseModel": {
        "title": "Subject matter expert",
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryResponseModel"
            },
            "description": "Users. The users identified as subject matter experts for the specified tag."
          },
          "userGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupResponseModel"
            },
            "description": "User groups. The user groups identified as subject matter experts for the specified tag."
          }
        },
        "additionalProperties": false
      },
      "TagResponseModel": {
        "title": "Tag",
        "type": "object",
        "properties": {
          "subjectMatterExperts": {
            "$ref": "#/components/schemas/SubjectMatterExpertResponseModel"
          },
          "id": {
            "type": "integer",
            "description": "ID. The tag's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Name. The tag's name.",
            "example": "refactoring"
          },
          "description": {
            "type": "string",
            "description": "Description. The tag's description.",
            "example": "Content related to refactoring code"
          },
          "postCount": {
            "type": "integer",
            "description": "PostCount. The number of posts that have this tag.",
            "format": "int32",
            "example": 129
          },
          "subjectMatterExpertCount": {
            "type": "integer",
            "description": "Subject Matter Expert Count. The total number of individual users who are SMEs for this tag.  This includes individual SMEs assigned, plus the members of any SME groups.  If null, SMEs are not enabled",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "watcherCount": {
            "type": "integer",
            "description": "WatcherCount. The number of users watching this tag.",
            "format": "int32",
            "example": 141
          },
          "creationDate": {
            "type": "string",
            "description": "CreationDate. The date and time the tag was created.",
            "format": "date-time",
            "example": "1955-11-12T22:04:00.0"
          },
          "hasSynonyms": {
            "type": "boolean",
            "description": "HasSynonyms. Returns true if the tag has synonym(s)."
          },
          "webUrl": {
            "type": "string",
            "description": "WebUrl. The web URL of the tag."
          }
        },
        "additionalProperties": false
      },
      "TagSummaryResponseModel": {
        "title": "Tag summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The tag's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Name. The tag's name.",
            "example": "refactoring"
          },
          "description": {
            "type": "string",
            "description": "Description. The tag's description.",
            "example": "Content related to refactoring code"
          },
          "postCount": {
            "type": "integer",
            "description": "PostCount. The number of posts that have this tag.",
            "format": "int32",
            "example": 129
          },
          "subjectMatterExpertCount": {
            "type": "integer",
            "description": "Subject Matter Expert Count. The total number of individual users who are SMEs for this tag.  This includes individual SMEs assigned, plus the members of any SME groups.  If null, SMEs are not enabled",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "watcherCount": {
            "type": "integer",
            "description": "WatcherCount. The number of users watching this tag.",
            "format": "int32",
            "example": 141
          },
          "creationDate": {
            "type": "string",
            "description": "CreationDate. The date and time the tag was created.",
            "format": "date-time",
            "example": "1955-11-12T22:04:00.0"
          },
          "hasSynonyms": {
            "type": "boolean",
            "description": "HasSynonyms. Returns true if the tag has synonym(s)."
          },
          "webUrl": {
            "type": "string",
            "description": "WebUrl. The web URL of the tag."
          }
        },
        "additionalProperties": false
      },
      "TagWatchersResponseModel": {
        "title": "Tag Watchers",
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryResponseModel"
            },
            "description": "Users. The users watching the specified tag."
          }
        },
        "additionalProperties": false
      },
      "TagsSortParameter": {
        "enum": [
          "name",
          "postCount",
          "creationDate"
        ],
        "type": "string",
        "description": "Tags sort parameter"
      },
      "UserDetailsResponseModel": {
        "title": "User details",
        "type": "object",
        "properties": {
          "communities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunitySummaryResponseModel"
            },
            "description": "Communities. Communities the user is a member of."
          },
          "externalId": {
            "type": "string",
            "description": "External ID. The unique external ID for the user that can be set via SCIM or SAML.",
            "nullable": true,
            "example": "12345"
          },
          "department": {
            "type": "string",
            "description": "Department. The user's organizational department that can be set via SAML.",
            "nullable": true,
            "example": "Engineering"
          },
          "jobTitle": {
            "type": "string",
            "description": "Job Title. The user's organizational job title that can be set via SAML.",
            "nullable": true,
            "example": "Software Developer"
          },
          "email": {
            "type": "string",
            "description": "Email address. Only visible to admins, or for the current user.",
            "nullable": true,
            "example": "user@example.com"
          },
          "id": {
            "type": "integer",
            "description": "ID. The user's unique identifier on this site.",
            "format": "int32",
            "example": 123
          },
          "accountId": {
            "type": "integer",
            "description": "Account ID. The user's unique account identifier across all Stack Overflow sites.",
            "format": "int32",
            "nullable": true,
            "example": 146
          },
          "name": {
            "type": "string",
            "description": "Name. The user's name.",
            "example": "Stack User"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Avatar URL. The URL to the user's avatar (profile picture).",
            "example": "https://stackoverflow.design/assets/img/logos/se/se-icon.png"
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The URL to the user's profile.",
            "example": "https://stackoverflow.com/users/31280"
          },
          "reputation": {
            "type": "integer",
            "description": "Reputation. The user's numerical reputation.",
            "format": "int32",
            "example": 101
          },
          "role": {
            "type": "string",
            "description": "Role. The user's role on the site.",
            "example": "Registered"
          }
        },
        "additionalProperties": false
      },
      "UserGroupRequestModel": {
        "title": "User group request model",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The user group's name.",
            "example": "Knowledgeable Group"
          },
          "description": {
            "type": "string",
            "description": "The user group's description.",
            "example": "A group of our most knowledgeable users"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User IDs.",
            "example": [
              2,
              20,
              46
            ]
          }
        },
        "additionalProperties": false
      },
      "UserGroupResponseModel": {
        "title": "User Group",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The user group's unique identifier.",
            "format": "int32",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Name. The user group's name.",
            "example": "Knowledgable Group"
          },
          "description": {
            "type": "string",
            "description": "Description. The user group's description.",
            "example": "A group of our most knowledgable users"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryResponseModel"
            }
          }
        },
        "additionalProperties": false
      },
      "UserGroupsSortParameter": {
        "enum": [
          "name",
          "size"
        ],
        "type": "string",
        "description": "User groups sort parameter"
      },
      "UserResponseModel": {
        "title": "User",
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External ID. The unique external ID for the user that can be set via SCIM or SAML.",
            "nullable": true,
            "example": "12345"
          },
          "department": {
            "type": "string",
            "description": "Department. The user's organizational department that can be set via SAML.",
            "nullable": true,
            "example": "Engineering"
          },
          "jobTitle": {
            "type": "string",
            "description": "Job Title. The user's organizational job title that can be set via SAML.",
            "nullable": true,
            "example": "Software Developer"
          },
          "email": {
            "type": "string",
            "description": "Email address. Only visible to admins, or for the current user.",
            "nullable": true,
            "example": "user@example.com"
          },
          "id": {
            "type": "integer",
            "description": "ID. The user's unique identifier on this site.",
            "format": "int32",
            "example": 123
          },
          "accountId": {
            "type": "integer",
            "description": "Account ID. The user's unique account identifier across all Stack Overflow sites.",
            "format": "int32",
            "nullable": true,
            "example": 146
          },
          "name": {
            "type": "string",
            "description": "Name. The user's name.",
            "example": "Stack User"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Avatar URL. The URL to the user's avatar (profile picture).",
            "example": "https://stackoverflow.design/assets/img/logos/se/se-icon.png"
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The URL to the user's profile.",
            "example": "https://stackoverflow.com/users/31280"
          },
          "reputation": {
            "type": "integer",
            "description": "Reputation. The user's numerical reputation.",
            "format": "int32",
            "example": 101
          },
          "role": {
            "type": "string",
            "description": "Role. The user's role on the site.",
            "example": "Registered"
          }
        },
        "additionalProperties": false
      },
      "UserSummaryResponseModel": {
        "title": "User summary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID. The user's unique identifier on this site.",
            "format": "int32",
            "example": 123
          },
          "accountId": {
            "type": "integer",
            "description": "Account ID. The user's unique account identifier across all Stack Overflow sites.",
            "format": "int32",
            "nullable": true,
            "example": 146
          },
          "name": {
            "type": "string",
            "description": "Name. The user's name.",
            "example": "Stack User"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Avatar URL. The URL to the user's avatar (profile picture).",
            "example": "https://stackoverflow.design/assets/img/logos/se/se-icon.png"
          },
          "webUrl": {
            "type": "string",
            "description": "URL. The URL to the user's profile.",
            "example": "https://stackoverflow.com/users/31280"
          },
          "reputation": {
            "type": "integer",
            "description": "Reputation. The user's numerical reputation.",
            "format": "int32",
            "example": 101
          },
          "role": {
            "type": "string",
            "description": "Role. The user's role on the site.",
            "example": "Registered"
          }
        },
        "additionalProperties": false
      },
      "UsersSortParameter": {
        "enum": [
          "reputation"
        ],
        "type": "string",
        "description": "Users sort parameter"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://stackoverflowteams.com/oauth",
            "tokenUrl": "https://stackoverflowteams.com/oauth/access_token/json",
            "scopes": {
              "write_access": "Allow write access",
              "access_team": "Access a team"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [ ]
    }
  ]
}